{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}
{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

  {{ $default_host := or ($.Env.DEFAULT_HOST) "" }}
  {{ $default_server := index (dict $host "" $default_host "default_server") $host }}

  {{ $container_name := "$CurrentContainer" }}

  {{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
  {{ $proto := trim (or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http") }}


  {{ $host := trim $host }}
  {{ $is_regexp := hasPrefix "~" $host }}
  {{ $upstream_name := when $is_regexp (sha1 $host) $host }}

  {{ range $container := $containers }}
      {{ $addrLen := len $container.Addresses }}
      {{ range $knownNetwork := $CurrentContainer.Networks }}
          {{ range $containerNetwork := $container.Networks }}
              {{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}
                  ## Can be connected with "{{ $containerNetwork.Name }}" network

                  {{/* If only 1 port exposed, use that */}}
                  {{ if eq $addrLen 1 }}
                      {{ $address := index $container.Addresses 0 }}
                    location /{{ $container.Name }}/ {
                          proxy_pass {{ trim $proto }}://{{ $upstream_name }}/;
                      }
                  {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
                  {{ else }}
                      {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
                      {{ $address := where $container.Addresses "Port" $port | first }}
                    location /{{ $container.Name }}/ {
                          proxy_pass {{ trim $proto }}://{{ $upstream_name }}:{{ $port }}/;
                      }
                  {{ end }}
  
              {{ else }}
                  ## Cannot connect to network of this container
                  server 127.0.0.1 down;
              {{ end }}
          {{ end }}
      {{ end }}

  {{ end }}
{{ end }}